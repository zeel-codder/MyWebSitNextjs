{"ast":null,"code":"\"use strict\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nexports.__esModule = true;\nexports.getDomainLocale = getDomainLocale;\nexports.addLocale = addLocale;\nexports.delLocale = delLocale;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports.default = void 0;\n\nvar _normalizeTrailingSlash = require(\"../../../client/normalize-trailing-slash\");\n\nvar _routeLoader = require(\"../../../client/route-loader\");\n\nvar _denormalizePagePath = require(\"../../server/denormalize-page-path\");\n\nvar _normalizeLocalePath = require(\"../i18n/normalize-locale-path\");\n\nvar _mitt = _interopRequireDefault(require(\"../mitt\"));\n\nvar _utils = require(\"../utils\");\n\nvar _isDynamic = require(\"./utils/is-dynamic\");\n\nvar _parseRelativeUrl = require(\"./utils/parse-relative-url\");\n\nvar _querystring = require(\"./utils/querystring\");\n\nvar _resolveRewrites = _interopRequireDefault(require(\"./utils/resolve-rewrites\"));\n\nvar _routeMatcher = require(\"./utils/route-matcher\");\n\nvar _routeRegex = require(\"./utils/route-regex\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // tslint:disable:no-console\n\n\nvar detectDomainLocale;\n\nif (process.env.__NEXT_I18N_SUPPORT) {\n  detectDomainLocale = require('../i18n/detect-domain-locale').detectDomainLocale;\n}\n\nvar basePath = process.env.__NEXT_ROUTER_BASEPATH || '';\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\n\nfunction addPathPrefix(path, prefix) {\n  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(prefix) : \"\".concat(prefix).concat(pathNoQueryHash(path) === '/' ? path.substring(1) : path) : path;\n}\n\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    locale = locale || (0, _normalizeLocalePath.normalizeLocalePath)(path, locales).detectedLocale;\n    var detectedDomain = detectDomainLocale(domainLocales, undefined, locale);\n\n    if (detectedDomain) {\n      return \"http\".concat(detectedDomain.http ? '' : 's', \"://\").concat(detectedDomain.domain).concat(basePath || '').concat(locale === detectedDomain.defaultLocale ? '' : \"/\".concat(locale)).concat(path);\n    }\n\n    return false;\n  }\n\n  return false;\n}\n\nfunction addLocale(path, locale, defaultLocale) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    var pathname = pathNoQueryHash(path);\n    var pathLower = pathname.toLowerCase();\n    var localeLower = locale && locale.toLowerCase();\n    return locale && locale !== defaultLocale && !pathLower.startsWith('/' + localeLower + '/') && pathLower !== '/' + localeLower ? addPathPrefix(path, '/' + locale) : path;\n  }\n\n  return path;\n}\n\nfunction delLocale(path, locale) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    var pathname = pathNoQueryHash(path);\n    var pathLower = pathname.toLowerCase();\n    var localeLower = locale && locale.toLowerCase();\n    return locale && (pathLower.startsWith('/' + localeLower + '/') || pathLower === '/' + localeLower) ? (pathname.length === locale.length + 1 ? '/' : '') + path.substr(locale.length + 1) : path;\n  }\n\n  return path;\n}\n\nfunction pathNoQueryHash(path) {\n  var queryIndex = path.indexOf('?');\n  var hashIndex = path.indexOf('#');\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);\n  }\n\n  return path;\n}\n\nfunction hasBasePath(path) {\n  path = pathNoQueryHash(path);\n  return path === basePath || path.startsWith(basePath + '/');\n}\n\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath);\n}\n\nfunction delBasePath(path) {\n  path = path.slice(basePath.length);\n  if (!path.startsWith('/')) path = \"/\".concat(path);\n  return path;\n}\n/**\n* Detects whether a given url is routable by the Next.js router (browser only).\n*/\n\n\nfunction isLocalURL(url) {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#')) return true;\n\n  try {\n    // absolute urls can be local if they are on the same origin\n    var locationOrigin = (0, _utils.getLocationOrigin)();\n    var resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction interpolateAs(route, asPathname, query) {\n  var interpolatedRoute = '';\n  var dynamicRegex = (0, _routeRegex.getRouteRegex)(route);\n  var dynamicGroups = dynamicRegex.groups;\n  var dynamicMatches = // Try to match the dynamic route against the asPath\n  (asPathname !== route ? (0, _routeMatcher.getRouteMatcher)(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href\n  // TODO: should this take priority; also need to change in the router.\n  query;\n  interpolatedRoute = route;\n  var params = Object.keys(dynamicGroups);\n\n  if (!params.every(param => {\n    var value = dynamicMatches[param] || '';\n    var {\n      repeat,\n      optional\n    } = dynamicGroups[param]; // support single-level catch-all\n    // TODO: more robust handling for user-error (passing `/`)\n\n    var replaced = \"[\".concat(repeat ? '...' : '').concat(param, \"]\");\n\n    if (optional) {\n      replaced = \"\".concat(!value ? '/' : '', \"[\").concat(replaced, \"]\");\n    }\n\n    if (repeat && !Array.isArray(value)) value = [value];\n    return (optional || param in dynamicMatches) && ( // Interpolate group into data URL if present\n    interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just\n    // path delimiter escaped since they are being inserted\n    // into the URL and we expect URL encoded segments\n    // when parsing dynamic route params\n    segment => encodeURIComponent(segment)).join('/') : encodeURIComponent(value)) || '/');\n  })) {\n    interpolatedRoute = ''; // did not satisfy all requirements\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n\n  return {\n    params,\n    result: interpolatedRoute\n  };\n}\n\nfunction omitParmsFromQuery(query, params) {\n  var filteredQuery = {};\n  Object.keys(query).forEach(key => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key];\n    }\n  });\n  return filteredQuery;\n}\n/**\n* Resolves a given hyperlink with a certain router state (basePath not included).\n* Preserves absolute urls.\n*/\n\n\nfunction resolveHref(currentPath, href, resolveAs) {\n  // we use a dummy base url for relative urls\n  var base;\n\n  try {\n    base = new URL(currentPath, 'http://n');\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n');\n  }\n\n  var urlAsString = typeof href === 'string' ? href : (0, _utils.formatWithValidation)(href); // Return because it cannot be routed by the Next.js router\n\n  if (!isLocalURL(urlAsString)) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n\n  try {\n    var finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(finalUrl.pathname);\n    var interpolatedAs = '';\n\n    if ((0, _isDynamic.isDynamicRoute)(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n      var query = (0, _querystring.searchParamsToUrlQuery)(finalUrl.searchParams);\n      var {\n        result,\n        params\n      } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);\n\n      if (result) {\n        interpolatedAs = (0, _utils.formatWithValidation)({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params)\n        });\n      }\n    } // if the origin didn't change, it means we received a relative href\n\n\n    var resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;\n  } catch (_) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n}\n\nfunction stripOrigin(url) {\n  var origin = (0, _utils.getLocationOrigin)();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  var [resolvedHref, resolvedAs] = resolveHref(router.asPath, url, true);\n  var origin = (0, _utils.getLocationOrigin)();\n  var hrefHadOrigin = resolvedHref.startsWith(origin);\n  var asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  var preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);\n  var preparedAs = as ? stripOrigin(resolveHref(router.asPath, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(pathname, pages) {\n  var cleanPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _denormalizePagePath.denormalizePagePath)(pathname));\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(page => {\n      if ((0, _isDynamic.isDynamicRoute)(page) && (0, _routeRegex.getRouteRegex)(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n\n  return (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n}\n\nvar manualScrollRestoration = process.env.__NEXT_SCROLL_RESTORATION && true && 'scrollRestoration' in window.history && !!function () {\n  try {\n    var v = '__next'; // eslint-disable-next-line no-sequences\n\n    return sessionStorage.setItem(v, v), sessionStorage.removeItem(v), true;\n  } catch (n) {}\n}();\nvar SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');\n\nfunction fetchRetry(url, attempts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(res => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1);\n      }\n\n      if (res.status === 404) {\n        return res.json().then(data => {\n          if (data.notFound) {\n            return {\n              notFound: SSG_DATA_NOT_FOUND\n            };\n          }\n\n          throw new Error(\"Failed to load static props\");\n        });\n      }\n\n      throw new Error(\"Failed to load static props\");\n    }\n\n    return res.json();\n  });\n}\n\nfunction fetchNextData(dataHref, isServerRender) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      (0, _routeLoader.markAssetError)(err);\n    }\n\n    throw err;\n  });\n}\n\nclass Router {\n  /**\n  * Map of all components loaded in `Router`\n  */\n  // Static Data Cache\n  // In-flight Server Data Requests, for deduping\n  constructor(_pathname, _query, _as, _ref) {\n    var {\n      initialProps,\n      pageLoader,\n      App,\n      wrapApp,\n      Component,\n      err,\n      subscription,\n      isFallback,\n      locale,\n      locales,\n      defaultLocale,\n      domainLocales,\n      isPreview\n    } = _ref;\n    this.route = void 0;\n    this.pathname = void 0;\n    this.query = void 0;\n    this.asPath = void 0;\n    this.basePath = void 0;\n    this.components = void 0;\n    this.sdc = {};\n    this.sdr = {};\n    this.sub = void 0;\n    this.clc = void 0;\n    this.pageLoader = void 0;\n    this._bps = void 0;\n    this.events = void 0;\n    this._wrapApp = void 0;\n    this.isSsr = void 0;\n    this.isFallback = void 0;\n    this._inFlightRoute = void 0;\n    this._shallow = void 0;\n    this.locale = void 0;\n    this.locales = void 0;\n    this.defaultLocale = void 0;\n    this.domainLocales = void 0;\n    this.isReady = void 0;\n    this.isPreview = void 0;\n    this.isLocaleDomain = void 0;\n    this._idx = 0;\n\n    this.onPopState = e => {\n      var state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        var {\n          pathname: _pathname2,\n          query\n        } = this;\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(_pathname2),\n          query\n        }), (0, _utils.getURL)());\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      }\n\n      var forcedScroll;\n      var {\n        url,\n        as,\n        options,\n        idx\n      } = state;\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          if (this._idx !== idx) {\n            // Snapshot current scroll position:\n            try {\n              sessionStorage.setItem('__next_scroll_' + this._idx, JSON.stringify({\n                x: self.pageXOffset,\n                y: self.pageYOffset\n              }));\n            } catch (_unused) {} // Restore old scroll position:\n\n\n            try {\n              var v = sessionStorage.getItem('__next_scroll_' + idx);\n              forcedScroll = JSON.parse(v);\n            } catch (_unused2) {\n              forcedScroll = {\n                x: 0,\n                y: 0\n              };\n            }\n          }\n        }\n      }\n\n      this._idx = idx;\n      var {\n        pathname\n      } = (0, _parseRelativeUrl.parseRelativeUrl)(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n      if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n\n      this.change('replaceState', url, as, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    this.route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(_pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (_pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        initial: true,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: [\n        /* /_app does not need its stylesheets managed */\n      ]\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = _pathname;\n    this.query = _query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    var autoExportDynamic = (0, _isDynamic.isDynamicRoute)(_pathname) && self.__NEXT_DATA__.autoExport;\n\n    this.asPath = autoExportDynamic ? _pathname : _as;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || !autoExportDynamic && !self.location.search && !process.env.__NEXT_HAS_REWRITES);\n    this.isPreview = !!isPreview;\n    this.isLocaleDomain = false;\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = locale;\n      this.locales = locales;\n      this.defaultLocale = defaultLocale;\n      this.domainLocales = domainLocales;\n      this.isLocaleDomain = !!detectDomainLocale(domainLocales, self.location.hostname);\n    }\n\n    if (true) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (_as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(_pathname),\n          query: _query\n        }), (0, _utils.getURL)(), {\n          locale\n        });\n      }\n\n      window.addEventListener('popstate', this.onPopState); // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual';\n        }\n      }\n    }\n  }\n\n  reload() {\n    window.location.reload();\n  }\n  /**\n  * Go back in history\n  */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n  * Performs a `pushState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  push(url, as) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (process.env.__NEXT_SCROLL_RESTORATION) {\n      // TODO: remove in the future when we update history before route change\n      // is complete, as the popstate event should handle this capture.\n      if (manualScrollRestoration) {\n        try {\n          // Snapshot scroll position right before navigating to a new page:\n          sessionStorage.setItem('__next_scroll_' + this._idx, JSON.stringify({\n            x: self.pageXOffset,\n            y: self.pageYOffset\n          }));\n        } catch (_unused3) {}\n      }\n    }\n\n    ;\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('pushState', url, as, options);\n  }\n  /**\n  * Performs a `replaceState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  replace(url, as) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    ;\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('replaceState', url, as, options);\n  }\n\n  change(method, url, as, options, forcedScroll) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _options$scroll;\n\n      if (!isLocalURL(url)) {\n        window.location.href = url;\n        return false;\n      }\n\n      var shouldResolveHref = url === as || options._h; // for static pages with query params in the URL we delay\n      // marking the router ready until after the query is updated\n\n      if (options._h) {\n        _this.isReady = true;\n      } // Default to scroll reset behavior unless explicitly specified to be\n      // `false`! This makes the behavior between using `Router#push` and a\n      // `<Link />` consistent.\n\n\n      options.scroll = !!((_options$scroll = options.scroll) != null ? _options$scroll : true);\n      var localeChange = options.locale !== _this.locale;\n\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        _this.locale = options.locale === false ? _this.defaultLocale : options.locale || _this.locale;\n\n        if (typeof options.locale === 'undefined') {\n          options.locale = _this.locale;\n        }\n\n        var parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(hasBasePath(as) ? delBasePath(as) : as);\n        var localePathResult = (0, _normalizeLocalePath.normalizeLocalePath)(parsedAs.pathname, _this.locales);\n\n        if (localePathResult.detectedLocale) {\n          _this.locale = localePathResult.detectedLocale;\n          parsedAs.pathname = addBasePath(parsedAs.pathname);\n          as = (0, _utils.formatWithValidation)(parsedAs);\n          url = addBasePath((0, _normalizeLocalePath.normalizeLocalePath)(hasBasePath(url) ? delBasePath(url) : url, _this.locales).pathname);\n        }\n\n        var didNavigate = false; // we need to wrap this in the env check again since regenerator runtime\n        // moves this on its own due to the return\n\n        if (process.env.__NEXT_I18N_SUPPORT) {\n          var _this$locales; // if the locale isn't configured hard navigate to show 404 page\n\n\n          if (!((_this$locales = _this.locales) != null && _this$locales.includes(_this.locale))) {\n            parsedAs.pathname = addLocale(parsedAs.pathname, _this.locale);\n            window.location.href = (0, _utils.formatWithValidation)(parsedAs); // this was previously a return but was removed in favor\n            // of better dead code elimination with regenerator runtime\n\n            didNavigate = true;\n          }\n        }\n\n        var detectedDomain = detectDomainLocale(_this.domainLocales, undefined, _this.locale); // we need to wrap this in the env check again since regenerator runtime\n        // moves this on its own due to the return\n\n        if (process.env.__NEXT_I18N_SUPPORT) {\n          // if we are navigating to a domain locale ensure we redirect to the\n          // correct domain\n          if (!didNavigate && detectedDomain && _this.isLocaleDomain && self.location.hostname !== detectedDomain.domain) {\n            var asNoBasePath = delBasePath(as);\n            window.location.href = \"http\".concat(detectedDomain.http ? '' : 's', \"://\").concat(detectedDomain.domain).concat(addBasePath(\"\".concat(_this.locale === detectedDomain.defaultLocale ? '' : \"/\".concat(_this.locale)).concat(asNoBasePath === '/' ? '' : asNoBasePath) || '/')); // this was previously a return but was removed in favor\n            // of better dead code elimination with regenerator runtime\n\n            didNavigate = true;\n          }\n        }\n\n        if (didNavigate) {\n          return new Promise(() => {});\n        }\n      }\n\n      if (!options._h) {\n        _this.isSsr = false;\n      } // marking route changes as a navigation start entry\n\n\n      if (_utils.ST) {\n        performance.mark('routeChange');\n      }\n\n      var {\n        shallow = false\n      } = options;\n      var routeProps = {\n        shallow\n      };\n\n      if (_this._inFlightRoute) {\n        _this.abortComponentLoad(_this._inFlightRoute, routeProps);\n      }\n\n      as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, _this.defaultLocale));\n      var cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, _this.locale);\n      _this._inFlightRoute = as; // If the url change is only related to a hash change\n      // We should not proceed. We should only change the state.\n      // WARNING: `_h` is an internal option for handing Next.js client-side\n      // hydration. Your app should _never_ use this property. It may change at\n      // any time without notice.\n\n      if (!options._h && _this.onlyAHashChange(cleanedAs)) {\n        _this.asPath = cleanedAs;\n        Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n        _this.changeState(method, url, as, options);\n\n        _this.scrollToHash(cleanedAs);\n\n        _this.notify(_this.components[_this.route], null);\n\n        Router.events.emit('hashChangeComplete', as, routeProps);\n        return true;\n      }\n\n      var parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);\n      var {\n        pathname,\n        query\n      } = parsed; // The build manifest needs to be loaded before auto-static dynamic pages\n      // get their query parameters to allow ensuring they can be parsed properly\n      // when rewritten to\n\n      var pages, rewrites;\n\n      try {\n        pages = yield _this.pageLoader.getPageList();\n        ({\n          __rewrites: rewrites\n        } = yield (0, _routeLoader.getClientBuildManifest)());\n      } catch (err) {\n        // If we fail to resolve the page list or client-build manifest, we must\n        // do a server-side transition:\n        window.location.href = as;\n        return false;\n      } // If asked to change the current URL we should reload the current page\n      // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n      // We also need to set the method = replaceState always\n      // as this should not go into the history (That's how browsers work)\n      // We should compare the new asPath to the current asPath, not the url\n\n\n      if (!_this.urlIsNew(cleanedAs) && !localeChange) {\n        method = 'replaceState';\n      } // we need to resolve the as value using rewrites for dynamic SSG\n      // pages to allow building the data URL correctly\n\n\n      var resolvedAs = as; // url and as should always be prefixed with basePath by this\n      // point by either next/link or router.push/replace so strip the\n      // basePath from the pathname to match the pages dir 1-to-1\n\n      pathname = pathname ? (0, _normalizeTrailingSlash.removePathTrailingSlash)(delBasePath(pathname)) : pathname;\n\n      if (shouldResolveHref && pathname !== '/_error') {\n        if (process.env.__NEXT_HAS_REWRITES && as.startsWith('/')) {\n          var rewritesResult = (0, _resolveRewrites.default)(addBasePath(addLocale(cleanedAs, _this.locale)), pages, rewrites, query, p => resolveDynamicRoute(p, pages), _this.locales);\n          resolvedAs = rewritesResult.asPath;\n\n          if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n            // if this directly matches a page we need to update the href to\n            // allow the correct page chunk to be loaded\n            pathname = rewritesResult.resolvedHref;\n            parsed.pathname = pathname;\n            url = (0, _utils.formatWithValidation)(parsed);\n          }\n        } else {\n          parsed.pathname = resolveDynamicRoute(pathname, pages);\n\n          if (parsed.pathname !== pathname) {\n            pathname = parsed.pathname;\n            url = (0, _utils.formatWithValidation)(parsed);\n          }\n        }\n      }\n\n      var route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n\n      if (!isLocalURL(as)) {\n        if (true) {\n          throw new Error(\"Invalid href: \\\"\".concat(url, \"\\\" and as: \\\"\").concat(as, \"\\\", received relative href and external as\") + \"\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as\");\n        }\n\n        window.location.href = as;\n        return false;\n      }\n\n      resolvedAs = delLocale(delBasePath(resolvedAs), _this.locale);\n\n      if ((0, _isDynamic.isDynamicRoute)(route)) {\n        var _parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(resolvedAs);\n\n        var asPathname = _parsedAs.pathname;\n        var routeRegex = (0, _routeRegex.getRouteRegex)(route);\n        var routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);\n        var shouldInterpolate = route === asPathname;\n        var interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};\n\n        if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n          var missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n\n          if (missingParams.length > 0) {\n            if (true) {\n              console.warn(\"\".concat(shouldInterpolate ? \"Interpolating href\" : \"Mismatching `as` and `href`\", \" failed to manually provide \") + \"the params: \".concat(missingParams.join(', '), \" in the `href`'s `query`\"));\n            }\n\n            throw new Error((shouldInterpolate ? \"The provided `href` (\".concat(url, \") value is missing query values (\").concat(missingParams.join(', '), \") to be interpolated properly. \") : \"The provided `as` value (\".concat(asPathname, \") is incompatible with the `href` value (\").concat(route, \"). \")) + \"Read more: https://nextjs.org/docs/messages/\".concat(shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'));\n          }\n        } else if (shouldInterpolate) {\n          as = (0, _utils.formatWithValidation)(Object.assign({}, _parsedAs, {\n            pathname: interpolatedAs.result,\n            query: omitParmsFromQuery(query, interpolatedAs.params)\n          }));\n        } else {\n          // Merge params into `query`, overwriting any specified in search\n          Object.assign(query, routeMatch);\n        }\n      }\n\n      Router.events.emit('routeChangeStart', as, routeProps);\n\n      try {\n        var _self$__NEXT_DATA__$p, _self$__NEXT_DATA__$p2;\n\n        var routeInfo = yield _this.getRouteInfo(route, pathname, query, as, resolvedAs, routeProps);\n        var {\n          error,\n          props,\n          __N_SSG,\n          __N_SSP\n        } = routeInfo; // handle redirect on client-transition\n\n        if ((__N_SSG || __N_SSP) && props) {\n          if (props.pageProps && props.pageProps.__N_REDIRECT) {\n            var destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n            // client-navigation if it is falling back to hard navigation if\n            // it's not\n\n            if (destination.startsWith('/')) {\n              var parsedHref = (0, _parseRelativeUrl.parseRelativeUrl)(destination);\n              parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n\n              if (pages.includes(parsedHref.pathname)) {\n                var {\n                  url: newUrl,\n                  as: newAs\n                } = prepareUrlAs(_this, destination, destination);\n                return _this.change(method, newUrl, newAs, options);\n              }\n            }\n\n            window.location.href = destination;\n            return new Promise(() => {});\n          }\n\n          _this.isPreview = !!props.__N_PREVIEW; // handle SSG data 404\n\n          if (props.notFound === SSG_DATA_NOT_FOUND) {\n            var notFoundRoute;\n\n            try {\n              yield _this.fetchComponent('/404');\n              notFoundRoute = '/404';\n            } catch (_) {\n              notFoundRoute = '/_error';\n            }\n\n            routeInfo = yield _this.getRouteInfo(notFoundRoute, notFoundRoute, query, as, resolvedAs, {\n              shallow: false\n            });\n          }\n        }\n\n        Router.events.emit('beforeHistoryChange', as, routeProps);\n\n        _this.changeState(method, url, as, options);\n\n        if (true) {\n          var appComp = _this.components['/_app'].Component;\n          window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n        } // shallow routing is only allowed for same page URL changes.\n\n\n        var isValidShallowRoute = options.shallow && _this.route === route;\n\n        if (options._h && pathname === '/_error' && ((_self$__NEXT_DATA__$p = self.__NEXT_DATA__.props) == null ? void 0 : (_self$__NEXT_DATA__$p2 = _self$__NEXT_DATA__$p.pageProps) == null ? void 0 : _self$__NEXT_DATA__$p2.statusCode) === 500 && props != null && props.pageProps) {\n          // ensure statusCode is still correct for static 500 page\n          // when updating query information\n          props.pageProps.statusCode = 500;\n        }\n\n        yield _this.set(route, pathname, query, cleanedAs, routeInfo, forcedScroll || (isValidShallowRoute || !options.scroll ? null : {\n          x: 0,\n          y: 0\n        })).catch(e => {\n          if (e.cancelled) error = error || e;else throw e;\n        });\n\n        if (error) {\n          Router.events.emit('routeChangeError', error, cleanedAs, routeProps);\n          throw error;\n        }\n\n        if (process.env.__NEXT_I18N_SUPPORT) {\n          if (_this.locale) {\n            document.documentElement.lang = _this.locale;\n          }\n        }\n\n        Router.events.emit('routeChangeComplete', as, routeProps);\n        return true;\n      } catch (err) {\n        if (err.cancelled) {\n          return false;\n        }\n\n        throw err;\n      }\n    })();\n  }\n\n  changeState(method, url, as) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(\"Warning: window.history is not available.\");\n        return;\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(\"Warning: window.history.\".concat(method, \" is not available\"));\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || (0, _utils.getURL)() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true,\n        idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1\n      }, // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n\n  handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (err.cancelled) {\n        // bubble up cancellation errors\n        throw err;\n      }\n\n      if ((0, _routeLoader.isAssetError)(err) || loadErrorFail) {\n        Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons\n        //  1. Page doesn't exists\n        //  2. Page does exist in a different zone\n        //  3. Internal error while loading the page\n        // So, doing a hard reload is the proper way to deal with this.\n\n        window.location.href = as; // Changing the URL doesn't block executing the current code path.\n        // So let's throw a cancellation error stop the routing logic.\n\n        throw buildCancellationError();\n      }\n\n      try {\n        var Component;\n        var styleSheets;\n        var props;\n\n        if (typeof Component === 'undefined' || typeof styleSheets === 'undefined') {\n          ;\n          ({\n            page: Component,\n            styleSheets\n          } = yield _this2.fetchComponent('/_error'));\n        }\n\n        var routeInfo = {\n          props,\n          Component,\n          styleSheets,\n          err,\n          error: err\n        };\n\n        if (!routeInfo.props) {\n          try {\n            routeInfo.props = yield _this2.getInitialProps(Component, {\n              err,\n              pathname,\n              query\n            });\n          } catch (gipErr) {\n            console.error('Error in error page `getInitialProps`: ', gipErr);\n            routeInfo.props = {};\n          }\n        }\n\n        return routeInfo;\n      } catch (routeInfoErr) {\n        return _this2.handleRouteInfoError(routeInfoErr, pathname, query, as, routeProps, true);\n      }\n    })();\n  }\n\n  getRouteInfo(route, pathname, query, as, resolvedAs, routeProps) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        var existingRouteInfo = _this3.components[route];\n\n        if (routeProps.shallow && existingRouteInfo && _this3.route === route) {\n          return existingRouteInfo;\n        }\n\n        var cachedRouteInfo = existingRouteInfo && 'initial' in existingRouteInfo ? undefined : existingRouteInfo;\n        var routeInfo = cachedRouteInfo ? cachedRouteInfo : yield _this3.fetchComponent(route).then(res => ({\n          Component: res.page,\n          styleSheets: res.styleSheets,\n          __N_SSG: res.mod.__N_SSG,\n          __N_SSP: res.mod.__N_SSP\n        }));\n        var {\n          Component,\n          __N_SSG,\n          __N_SSP\n        } = routeInfo;\n\n        if (true) {\n          var {\n            isValidElementType\n          } = require('react-is');\n\n          if (!isValidElementType(Component)) {\n            throw new Error(\"The default export is not a React Component in page: \\\"\".concat(pathname, \"\\\"\"));\n          }\n        }\n\n        var dataHref;\n\n        if (__N_SSG || __N_SSP) {\n          dataHref = _this3.pageLoader.getDataHref((0, _utils.formatWithValidation)({\n            pathname,\n            query\n          }), resolvedAs, __N_SSG, _this3.locale);\n        }\n\n        var props = yield _this3._getData(() => __N_SSG ? _this3._getStaticData(dataHref) : __N_SSP ? _this3._getServerData(dataHref) : _this3.getInitialProps(Component, // we provide AppTree later so this needs to be `any`\n        {\n          pathname,\n          query,\n          asPath: as,\n          locale: _this3.locale,\n          locales: _this3.locales,\n          defaultLocale: _this3.defaultLocale\n        }));\n        routeInfo.props = props;\n        _this3.components[route] = routeInfo;\n        return routeInfo;\n      } catch (err) {\n        return _this3.handleRouteInfoError(err, pathname, query, as, routeProps);\n      }\n    })();\n  }\n\n  set(route, pathname, query, as, data, resetScroll) {\n    this.isFallback = false;\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    return this.notify(data, resetScroll);\n  }\n  /**\n  * Callback to execute before replacing router state\n  * @param cb callback to be executed\n  */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    var [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    var [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    var [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n\n    if (hash === '' || hash === 'top') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    var idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    var nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n  * Prefetch page code, you may wait for the data during page rendering.\n  * This feature only works in production!\n  * @param url the href of prefetched page\n  * @param asPath the as path of the prefetched page\n  */\n\n\n  prefetch(url) {\n    var _arguments = arguments,\n        _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      var asPath = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : url;\n      var options = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : {};\n      var parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);\n      var {\n        pathname\n      } = parsed;\n\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        if (options.locale === false) {\n          pathname = (0, _normalizeLocalePath.normalizeLocalePath)(pathname, _this4.locales).pathname;\n          parsed.pathname = pathname;\n          url = (0, _utils.formatWithValidation)(parsed);\n          var parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(asPath);\n          var localePathResult = (0, _normalizeLocalePath.normalizeLocalePath)(parsedAs.pathname, _this4.locales);\n          parsedAs.pathname = localePathResult.pathname;\n          options.locale = localePathResult.detectedLocale || _this4.defaultLocale;\n          asPath = (0, _utils.formatWithValidation)(parsedAs);\n        }\n      }\n\n      var pages = yield _this4.pageLoader.getPageList();\n      var resolvedAs = asPath;\n\n      if (process.env.__NEXT_HAS_REWRITES && asPath.startsWith('/')) {\n        var rewrites;\n        ({\n          __rewrites: rewrites\n        } = yield (0, _routeLoader.getClientBuildManifest)());\n        var rewritesResult = (0, _resolveRewrites.default)(addBasePath(addLocale(asPath, _this4.locale)), pages, rewrites, parsed.query, p => resolveDynamicRoute(p, pages), _this4.locales);\n        resolvedAs = delLocale(delBasePath(rewritesResult.asPath), _this4.locale);\n\n        if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n          // if this directly matches a page we need to update the href to\n          // allow the correct page chunk to be loaded\n          pathname = rewritesResult.resolvedHref;\n          parsed.pathname = pathname;\n          url = (0, _utils.formatWithValidation)(parsed);\n        }\n      } else {\n        parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n\n        if (parsed.pathname !== pathname) {\n          pathname = parsed.pathname;\n          url = (0, _utils.formatWithValidation)(parsed);\n        }\n      }\n\n      var route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname); // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n      if (true) {\n        return;\n      }\n\n      yield Promise.all([_this4.pageLoader._isSsg(route).then(isSsg => {\n        return isSsg ? _this4._getStaticData(_this4.pageLoader.getDataHref(url, resolvedAs, true, typeof options.locale !== 'undefined' ? options.locale : _this4.locale)) : false;\n      }), _this4.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n    })();\n  }\n\n  fetchComponent(route) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      var cancelled = false;\n\n      var cancel = _this5.clc = () => {\n        cancelled = true;\n      };\n\n      var componentResult = yield _this5.pageLoader.loadPage(route);\n\n      if (cancelled) {\n        var error = new Error(\"Abort fetching component for route: \\\"\".concat(route, \"\\\"\"));\n        error.cancelled = true;\n        throw error;\n      }\n\n      if (cancel === _this5.clc) {\n        _this5.clc = null;\n      }\n\n      return componentResult;\n    })();\n  }\n\n  _getData(fn) {\n    var cancelled = false;\n\n    var cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n\n      if (cancelled) {\n        var err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n\n      return data;\n    });\n  }\n\n  _getStaticData(dataHref) {\n    var {\n      href: cacheKey\n    } = new URL(dataHref, window.location.href);\n\n    if (false && !this.isPreview && this.sdc[cacheKey]) {\n      return Promise.resolve(this.sdc[cacheKey]);\n    }\n\n    return fetchNextData(dataHref, this.isSsr).then(data => {\n      this.sdc[cacheKey] = data;\n      return data;\n    });\n  }\n\n  _getServerData(dataHref) {\n    var {\n      href: resourceKey\n    } = new URL(dataHref, window.location.href);\n\n    if (this.sdr[resourceKey]) {\n      return this.sdr[resourceKey];\n    }\n\n    return this.sdr[resourceKey] = fetchNextData(dataHref, this.isSsr).then(data => {\n      delete this.sdr[resourceKey];\n      return data;\n    }).catch(err => {\n      delete this.sdr[resourceKey];\n      throw err;\n    });\n  }\n\n  getInitialProps(Component, ctx) {\n    var {\n      Component: App\n    } = this.components['/_app'];\n\n    var AppTree = this._wrapApp(App);\n\n    ctx.AppTree = AppTree;\n    return (0, _utils.loadGetInitialProps)(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n\n  abortComponentLoad(as, routeProps) {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);\n      this.clc();\n      this.clc = null;\n    }\n  }\n\n  notify(data, resetScroll) {\n    return this.sub(data, this.components['/_app'].Component, resetScroll);\n  }\n\n}\n\nexports.default = Router;\nRouter.events = (0, _mitt.default)();","map":{"version":3,"sources":["../../../../next-server/lib/router/router.ts"],"names":["process","detectDomainLocale","require","basePath","Object","cancelled","prefix","path","pathNoQueryHash","locale","detectedDomain","domain","pathname","pathLower","localeLower","addPathPrefix","queryIndex","hashIndex","url","locationOrigin","resolved","hasBasePath","interpolatedRoute","dynamicRegex","dynamicGroups","dynamicMatches","asPathname","params","param","value","replaced","repeat","Array","optional","segment","encodeURIComponent","result","filteredQuery","key","query","base","urlAsString","isLocalURL","resolveAs","finalUrl","interpolatedAs","interpolateAs","hash","omitParmsFromQuery","resolvedHref","origin","resolveHref","router","hrefHadOrigin","asHadOrigin","resolvedAs","stripOrigin","preparedUrl","addBasePath","preparedAs","as","cleanPathname","pages","page","manualScrollRestoration","window","v","sessionStorage","SSG_DATA_NOT_FOUND","Symbol","credentials","res","attempts","fetchRetry","data","notFound","isServerRender","err","Router","route","asPath","components","sdc","sdr","sub","clc","pageLoader","_bps","events","_wrapApp","isSsr","isFallback","_inFlightRoute","_shallow","locales","defaultLocale","domainLocales","isReady","isPreview","isLocaleDomain","_idx","constructor","initial","props","__N_SSG","initialProps","__N_SSP","Component","styleSheets","autoExportDynamic","self","e","state","JSON","x","y","forcedScroll","shallow","options","reload","back","push","prepareUrlAs","replace","shouldResolveHref","localeChange","parsedAs","delBasePath","localePathResult","didNavigate","addLocale","asNoBasePath","ST","performance","routeProps","cleanedAs","delLocale","parsed","__rewrites","method","rewritesResult","p","resolveDynamicRoute","routeRegex","routeMatch","shouldInterpolate","missingParams","console","routeInfo","destination","parsedHref","notFoundRoute","appComp","isValidShallowRoute","error","document","changeState","__N","idx","buildCancellationError","existingRouteInfo","cachedRouteInfo","isValidElementType","dataHref","set","beforePopState","onlyAHashChange","newHash","oldUrlNoHash","oldHash","scrollToHash","idEl","nameEl","urlIsNew","Promise","isSsg","cancel","componentResult","_getData","fn","_getStaticData","href","fetchNextData","_getServerData","getInitialProps","AppTree","ctx","abortComponentLoad","notify"],"mappings":"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","sourcesContent":["// tslint:disable:no-console\nimport { ParsedUrlQuery } from 'querystring'\nimport { ComponentType } from 'react'\nimport { UrlObject } from 'url'\nimport {\n  normalizePathTrailingSlash,\n  removePathTrailingSlash,\n} from '../../../client/normalize-trailing-slash'\nimport { GoodPageCache, StyleSheetTuple } from '../../../client/page-loader'\nimport {\n  getClientBuildManifest,\n  isAssetError,\n  markAssetError,\n} from '../../../client/route-loader'\nimport { DomainLocales } from '../../server/config'\nimport { denormalizePagePath } from '../../server/denormalize-page-path'\nimport { normalizeLocalePath } from '../i18n/normalize-locale-path'\nimport mitt, { MittEmitter } from '../mitt'\nimport {\n  AppContextType,\n  formatWithValidation,\n  getLocationOrigin,\n  getURL,\n  loadGetInitialProps,\n  NextPageContext,\n  ST,\n  NEXT_DATA,\n} from '../utils'\nimport { isDynamicRoute } from './utils/is-dynamic'\nimport { parseRelativeUrl } from './utils/parse-relative-url'\nimport { searchParamsToUrlQuery } from './utils/querystring'\nimport resolveRewrites from './utils/resolve-rewrites'\nimport { getRouteMatcher } from './utils/route-matcher'\nimport { getRouteRegex } from './utils/route-regex'\n\ndeclare global {\n  interface Window {\n    /* prod */\n    __NEXT_DATA__: NEXT_DATA\n  }\n}\n\ninterface RouteProperties {\n  shallow: boolean\n}\n\ninterface TransitionOptions {\n  shallow?: boolean\n  locale?: string | false\n  scroll?: boolean\n}\n\ninterface NextHistoryState {\n  url: string\n  as: string\n  options: TransitionOptions\n}\n\ntype HistoryState =\n  | null\n  | { __N: false }\n  | ({ __N: true; idx: number } & NextHistoryState)\n\nlet detectDomainLocale: typeof import('../i18n/detect-domain-locale').detectDomainLocale\n\nif (process.env.__NEXT_I18N_SUPPORT) {\n  detectDomainLocale = require('../i18n/detect-domain-locale')\n    .detectDomainLocale\n}\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true,\n  })\n}\n\nfunction addPathPrefix(path: string, prefix?: string) {\n  return prefix && path.startsWith('/')\n    ? path === '/'\n      ? normalizePathTrailingSlash(prefix)\n      : `${prefix}${pathNoQueryHash(path) === '/' ? path.substring(1) : path}`\n    : path\n}\n\nexport function getDomainLocale(\n  path: string,\n  locale?: string | false,\n  locales?: string[],\n  domainLocales?: DomainLocales\n) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    locale = locale || normalizeLocalePath(path, locales).detectedLocale\n\n    const detectedDomain = detectDomainLocale(domainLocales, undefined, locale)\n\n    if (detectedDomain) {\n      return `http${detectedDomain.http ? '' : 's'}://${detectedDomain.domain}${\n        basePath || ''\n      }${locale === detectedDomain.defaultLocale ? '' : `/${locale}`}${path}`\n    }\n    return false\n  }\n\n  return false\n}\n\nexport function addLocale(\n  path: string,\n  locale?: string | false,\n  defaultLocale?: string\n) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    const pathname = pathNoQueryHash(path)\n    const pathLower = pathname.toLowerCase()\n    const localeLower = locale && locale.toLowerCase()\n\n    return locale &&\n      locale !== defaultLocale &&\n      !pathLower.startsWith('/' + localeLower + '/') &&\n      pathLower !== '/' + localeLower\n      ? addPathPrefix(path, '/' + locale)\n      : path\n  }\n  return path\n}\n\nexport function delLocale(path: string, locale?: string) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    const pathname = pathNoQueryHash(path)\n    const pathLower = pathname.toLowerCase()\n    const localeLower = locale && locale.toLowerCase()\n\n    return locale &&\n      (pathLower.startsWith('/' + localeLower + '/') ||\n        pathLower === '/' + localeLower)\n      ? (pathname.length === locale.length + 1 ? '/' : '') +\n          path.substr(locale.length + 1)\n      : path\n  }\n  return path\n}\n\nfunction pathNoQueryHash(path: string) {\n  const queryIndex = path.indexOf('?')\n  const hashIndex = path.indexOf('#')\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex)\n  }\n  return path\n}\n\nexport function hasBasePath(path: string): boolean {\n  path = pathNoQueryHash(path)\n  return path === basePath || path.startsWith(basePath + '/')\n}\n\nexport function addBasePath(path: string): string {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath)\n}\n\nexport function delBasePath(path: string): string {\n  path = path.slice(basePath.length)\n  if (!path.startsWith('/')) path = `/${path}`\n  return path\n}\n\n/**\n * Detects whether a given url is routable by the Next.js router (browser only).\n */\nexport function isLocalURL(url: string): boolean {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#')) return true\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = getLocationOrigin()\n    const resolved = new URL(url, locationOrigin)\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname)\n  } catch (_) {\n    return false\n  }\n}\n\ntype Url = UrlObject | string\n\nexport function interpolateAs(\n  route: string,\n  asPathname: string,\n  query: ParsedUrlQuery\n) {\n  let interpolatedRoute = ''\n\n  const dynamicRegex = getRouteRegex(route)\n  const dynamicGroups = dynamicRegex.groups\n  const dynamicMatches =\n    // Try to match the dynamic route against the asPath\n    (asPathname !== route ? getRouteMatcher(dynamicRegex)(asPathname) : '') ||\n    // Fall back to reading the values from the href\n    // TODO: should this take priority; also need to change in the router.\n    query\n\n  interpolatedRoute = route\n  const params = Object.keys(dynamicGroups)\n\n  if (\n    !params.every((param) => {\n      let value = dynamicMatches[param] || ''\n      const { repeat, optional } = dynamicGroups[param]\n\n      // support single-level catch-all\n      // TODO: more robust handling for user-error (passing `/`)\n      let replaced = `[${repeat ? '...' : ''}${param}]`\n      if (optional) {\n        replaced = `${!value ? '/' : ''}[${replaced}]`\n      }\n      if (repeat && !Array.isArray(value)) value = [value]\n\n      return (\n        (optional || param in dynamicMatches) &&\n        // Interpolate group into data URL if present\n        (interpolatedRoute =\n          interpolatedRoute!.replace(\n            replaced,\n            repeat\n              ? (value as string[])\n                  .map(\n                    // these values should be fully encoded instead of just\n                    // path delimiter escaped since they are being inserted\n                    // into the URL and we expect URL encoded segments\n                    // when parsing dynamic route params\n                    (segment) => encodeURIComponent(segment)\n                  )\n                  .join('/')\n              : encodeURIComponent(value as string)\n          ) || '/')\n      )\n    })\n  ) {\n    interpolatedRoute = '' // did not satisfy all requirements\n\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n  return {\n    params,\n    result: interpolatedRoute,\n  }\n}\n\nfunction omitParmsFromQuery(query: ParsedUrlQuery, params: string[]) {\n  const filteredQuery: ParsedUrlQuery = {}\n\n  Object.keys(query).forEach((key) => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key]\n    }\n  })\n  return filteredQuery\n}\n\n/**\n * Resolves a given hyperlink with a certain router state (basePath not included).\n * Preserves absolute urls.\n */\nexport function resolveHref(\n  currentPath: string,\n  href: Url,\n  resolveAs?: boolean\n): string {\n  // we use a dummy base url for relative urls\n  let base: URL\n\n  try {\n    base = new URL(currentPath, 'http://n')\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n')\n  }\n  const urlAsString =\n    typeof href === 'string' ? href : formatWithValidation(href)\n  // Return because it cannot be routed by the Next.js router\n  if (!isLocalURL(urlAsString)) {\n    return (resolveAs ? [urlAsString] : urlAsString) as string\n  }\n  try {\n    const finalUrl = new URL(urlAsString, base)\n    finalUrl.pathname = normalizePathTrailingSlash(finalUrl.pathname)\n    let interpolatedAs = ''\n\n    if (\n      isDynamicRoute(finalUrl.pathname) &&\n      finalUrl.searchParams &&\n      resolveAs\n    ) {\n      const query = searchParamsToUrlQuery(finalUrl.searchParams)\n\n      const { result, params } = interpolateAs(\n        finalUrl.pathname,\n        finalUrl.pathname,\n        query\n      )\n\n      if (result) {\n        interpolatedAs = formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params),\n        })\n      }\n    }\n\n    // if the origin didn't change, it means we received a relative href\n    const resolvedHref =\n      finalUrl.origin === base.origin\n        ? finalUrl.href.slice(finalUrl.origin.length)\n        : finalUrl.href\n\n    return (resolveAs\n      ? [resolvedHref, interpolatedAs || resolvedHref]\n      : resolvedHref) as string\n  } catch (_) {\n    return (resolveAs ? [urlAsString] : urlAsString) as string\n  }\n}\n\nfunction stripOrigin(url: string) {\n  const origin = getLocationOrigin()\n\n  return url.startsWith(origin) ? url.substring(origin.length) : url\n}\n\nfunction prepareUrlAs(router: NextRouter, url: Url, as?: Url) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = resolveHref(router.asPath, url, true)\n  const origin = getLocationOrigin()\n  const hrefHadOrigin = resolvedHref.startsWith(origin)\n  const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin)\n\n  resolvedHref = stripOrigin(resolvedHref)\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs\n\n  const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref)\n  const preparedAs = as\n    ? stripOrigin(resolveHref(router.asPath, as))\n    : resolvedAs || resolvedHref\n\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs),\n  }\n}\n\nfunction resolveDynamicRoute(pathname: string, pages: string[]) {\n  const cleanPathname = removePathTrailingSlash(denormalizePagePath(pathname!))\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname\n  }\n\n  // handle resolving href for dynamic routes\n  if (!pages.includes(cleanPathname!)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some((page) => {\n      if (isDynamicRoute(page) && getRouteRegex(page).re.test(cleanPathname!)) {\n        pathname = page\n        return true\n      }\n    })\n  }\n  return removePathTrailingSlash(pathname)\n}\n\nexport type BaseRouter = {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n  domainLocales?: DomainLocales\n  isLocaleDomain: boolean\n}\n\nexport type NextRouter = BaseRouter &\n  Pick<\n    Router,\n    | 'push'\n    | 'replace'\n    | 'reload'\n    | 'back'\n    | 'prefetch'\n    | 'beforePopState'\n    | 'events'\n    | 'isFallback'\n    | 'isReady'\n    | 'isPreview'\n  >\n\nexport type PrefetchOptions = {\n  priority?: boolean\n  locale?: string | false\n}\n\nexport type PrivateRouteInfo =\n  | (Omit<CompletePrivateRouteInfo, 'styleSheets'> & { initial: true })\n  | CompletePrivateRouteInfo\n\nexport type CompletePrivateRouteInfo = {\n  Component: ComponentType\n  styleSheets: StyleSheetTuple[]\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n  props?: Record<string, any>\n  err?: Error\n  error?: any\n}\n\nexport type AppProps = Pick<CompletePrivateRouteInfo, 'Component' | 'err'> & {\n  router: Router\n} & Record<string, any>\nexport type AppComponent = ComponentType<AppProps>\n\ntype Subscription = (\n  data: PrivateRouteInfo,\n  App: AppComponent,\n  resetScroll: { x: number; y: number } | null\n) => Promise<void>\n\ntype BeforePopStateCallback = (state: NextHistoryState) => boolean\n\ntype ComponentLoadCancel = (() => void) | null\n\ntype HistoryMethod = 'replaceState' | 'pushState'\n\nconst manualScrollRestoration =\n  process.env.__NEXT_SCROLL_RESTORATION &&\n  typeof window !== 'undefined' &&\n  'scrollRestoration' in window.history &&\n  !!(function () {\n    try {\n      let v = '__next'\n      // eslint-disable-next-line no-sequences\n      return sessionStorage.setItem(v, v), sessionStorage.removeItem(v), true\n    } catch (n) {}\n  })()\n\nconst SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND')\n\nfunction fetchRetry(url: string, attempts: number): Promise<any> {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin',\n  }).then((res) => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1)\n      }\n      if (res.status === 404) {\n        return res.json().then((data) => {\n          if (data.notFound) {\n            return { notFound: SSG_DATA_NOT_FOUND }\n          }\n          throw new Error(`Failed to load static props`)\n        })\n      }\n      throw new Error(`Failed to load static props`)\n    }\n    return res.json()\n  })\n}\n\nfunction fetchNextData(dataHref: string, isServerRender: boolean) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch((err: Error) => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n\n    if (!isServerRender) {\n      markAssetError(err)\n    }\n    throw err\n  })\n}\n\nexport default class Router implements BaseRouter {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n\n  /**\n   * Map of all components loaded in `Router`\n   */\n  components: { [pathname: string]: PrivateRouteInfo }\n  // Static Data Cache\n  sdc: { [asPath: string]: object } = {}\n  // In-flight Server Data Requests, for deduping\n  sdr: { [asPath: string]: Promise<object> } = {}\n\n  sub: Subscription\n  clc: ComponentLoadCancel\n  pageLoader: any\n  _bps: BeforePopStateCallback | undefined\n  events: MittEmitter\n  _wrapApp: (App: AppComponent) => any\n  isSsr: boolean\n  isFallback: boolean\n  _inFlightRoute?: string\n  _shallow?: boolean\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n  domainLocales?: DomainLocales\n  isReady: boolean\n  isPreview: boolean\n  isLocaleDomain: boolean\n\n  private _idx: number = 0\n\n  static events: MittEmitter = mitt()\n\n  constructor(\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    {\n      initialProps,\n      pageLoader,\n      App,\n      wrapApp,\n      Component,\n      err,\n      subscription,\n      isFallback,\n      locale,\n      locales,\n      defaultLocale,\n      domainLocales,\n      isPreview,\n    }: {\n      subscription: Subscription\n      initialProps: any\n      pageLoader: any\n      Component: ComponentType\n      App: AppComponent\n      wrapApp: (WrapAppComponent: AppComponent) => any\n      err?: Error\n      isFallback: boolean\n      locale?: string\n      locales?: string[]\n      defaultLocale?: string\n      domainLocales?: DomainLocales\n      isPreview?: boolean\n    }\n  ) {\n    // represents the current component key\n    this.route = removePathTrailingSlash(pathname)\n\n    // set up the component cache (by route keys)\n    this.components = {}\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        initial: true,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n      }\n    }\n\n    this.components['/_app'] = {\n      Component: App as ComponentType,\n      styleSheets: [\n        /* /_app does not need its stylesheets managed */\n      ],\n    }\n\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events\n\n    this.pageLoader = pageLoader\n    this.pathname = pathname\n    this.query = query\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    const autoExportDynamic =\n      isDynamicRoute(pathname) && self.__NEXT_DATA__.autoExport\n\n    this.asPath = autoExportDynamic ? pathname : as\n    this.basePath = basePath\n    this.sub = subscription\n    this.clc = null\n    this._wrapApp = wrapApp\n    // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true\n\n    this.isFallback = isFallback\n\n    this.isReady = !!(\n      self.__NEXT_DATA__.gssp ||\n      self.__NEXT_DATA__.gip ||\n      (!autoExportDynamic &&\n        !self.location.search &&\n        !process.env.__NEXT_HAS_REWRITES)\n    )\n    this.isPreview = !!isPreview\n    this.isLocaleDomain = false\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = locale\n      this.locales = locales\n      this.defaultLocale = defaultLocale\n      this.domainLocales = domainLocales\n      this.isLocaleDomain = !!detectDomainLocale(\n        domainLocales,\n        self.location.hostname\n      )\n    }\n\n    if (typeof window !== 'undefined') {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState(\n          'replaceState',\n          formatWithValidation({ pathname: addBasePath(pathname), query }),\n          getURL(),\n          { locale }\n        )\n      }\n\n      window.addEventListener('popstate', this.onPopState)\n\n      // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual'\n        }\n      }\n    }\n  }\n\n  onPopState = (e: PopStateEvent): void => {\n    const state = e.state as HistoryState\n\n    if (!state) {\n      // We get state as undefined for two reasons.\n      //  1. With older safari (< 8) and older chrome (< 34)\n      //  2. When the URL changed with #\n      //\n      // In the both cases, we don't need to proceed and change the route.\n      // (as it's already changed)\n      // But we can simply replace the state with the new changes.\n      // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n      // So, doing the following for (1) does no harm.\n      const { pathname, query } = this\n      this.changeState(\n        'replaceState',\n        formatWithValidation({ pathname: addBasePath(pathname), query }),\n        getURL()\n      )\n      return\n    }\n\n    if (!state.__N) {\n      return\n    }\n\n    let forcedScroll: { x: number; y: number } | undefined\n    const { url, as, options, idx } = state\n    if (process.env.__NEXT_SCROLL_RESTORATION) {\n      if (manualScrollRestoration) {\n        if (this._idx !== idx) {\n          // Snapshot current scroll position:\n          try {\n            sessionStorage.setItem(\n              '__next_scroll_' + this._idx,\n              JSON.stringify({ x: self.pageXOffset, y: self.pageYOffset })\n            )\n          } catch {}\n\n          // Restore old scroll position:\n          try {\n            const v = sessionStorage.getItem('__next_scroll_' + idx)\n            forcedScroll = JSON.parse(v!)\n          } catch {\n            forcedScroll = { x: 0, y: 0 }\n          }\n        }\n      }\n    }\n    this._idx = idx\n\n    const { pathname } = parseRelativeUrl(url)\n\n    // Make sure we don't re-render on initial load,\n    // can be caused by navigating back from an external site\n    if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n      return\n    }\n\n    // If the downstream application returns falsy, return.\n    // They will then be responsible for handling the event.\n    if (this._bps && !this._bps(state)) {\n      return\n    }\n\n    this.change(\n      'replaceState',\n      url,\n      as,\n      Object.assign<{}, TransitionOptions, TransitionOptions>({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale,\n      }),\n      forcedScroll\n    )\n  }\n\n  reload(): void {\n    window.location.reload()\n  }\n\n  /**\n   * Go back in history\n   */\n  back() {\n    window.history.back()\n  }\n\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  push(url: Url, as?: Url, options: TransitionOptions = {}) {\n    if (process.env.__NEXT_SCROLL_RESTORATION) {\n      // TODO: remove in the future when we update history before route change\n      // is complete, as the popstate event should handle this capture.\n      if (manualScrollRestoration) {\n        try {\n          // Snapshot scroll position right before navigating to a new page:\n          sessionStorage.setItem(\n            '__next_scroll_' + this._idx,\n            JSON.stringify({ x: self.pageXOffset, y: self.pageYOffset })\n          )\n        } catch {}\n      }\n    }\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('pushState', url, as, options)\n  }\n\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  replace(url: Url, as?: Url, options: TransitionOptions = {}) {\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('replaceState', url, as, options)\n  }\n\n  private async change(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions,\n    forcedScroll?: { x: number; y: number }\n  ): Promise<boolean> {\n    if (!isLocalURL(url)) {\n      window.location.href = url\n      return false\n    }\n    const shouldResolveHref = url === as || (options as any)._h\n\n    // for static pages with query params in the URL we delay\n    // marking the router ready until after the query is updated\n    if ((options as any)._h) {\n      this.isReady = true\n    }\n\n    // Default to scroll reset behavior unless explicitly specified to be\n    // `false`! This makes the behavior between using `Router#push` and a\n    // `<Link />` consistent.\n    options.scroll = !!(options.scroll ?? true)\n\n    let localeChange = options.locale !== this.locale\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale =\n        options.locale === false\n          ? this.defaultLocale\n          : options.locale || this.locale\n\n      if (typeof options.locale === 'undefined') {\n        options.locale = this.locale\n      }\n\n      const parsedAs = parseRelativeUrl(hasBasePath(as) ? delBasePath(as) : as)\n      const localePathResult = normalizeLocalePath(\n        parsedAs.pathname,\n        this.locales\n      )\n\n      if (localePathResult.detectedLocale) {\n        this.locale = localePathResult.detectedLocale\n        parsedAs.pathname = addBasePath(parsedAs.pathname)\n        as = formatWithValidation(parsedAs)\n        url = addBasePath(\n          normalizeLocalePath(\n            hasBasePath(url) ? delBasePath(url) : url,\n            this.locales\n          ).pathname\n        )\n      }\n      let didNavigate = false\n\n      // we need to wrap this in the env check again since regenerator runtime\n      // moves this on its own due to the return\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        // if the locale isn't configured hard navigate to show 404 page\n        if (!this.locales?.includes(this.locale!)) {\n          parsedAs.pathname = addLocale(parsedAs.pathname, this.locale)\n          window.location.href = formatWithValidation(parsedAs)\n          // this was previously a return but was removed in favor\n          // of better dead code elimination with regenerator runtime\n          didNavigate = true\n        }\n      }\n\n      const detectedDomain = detectDomainLocale(\n        this.domainLocales,\n        undefined,\n        this.locale\n      )\n\n      // we need to wrap this in the env check again since regenerator runtime\n      // moves this on its own due to the return\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        // if we are navigating to a domain locale ensure we redirect to the\n        // correct domain\n        if (\n          !didNavigate &&\n          detectedDomain &&\n          this.isLocaleDomain &&\n          self.location.hostname !== detectedDomain.domain\n        ) {\n          const asNoBasePath = delBasePath(as)\n          window.location.href = `http${detectedDomain.http ? '' : 's'}://${\n            detectedDomain.domain\n          }${addBasePath(\n            `${\n              this.locale === detectedDomain.defaultLocale\n                ? ''\n                : `/${this.locale}`\n            }${asNoBasePath === '/' ? '' : asNoBasePath}` || '/'\n          )}`\n          // this was previously a return but was removed in favor\n          // of better dead code elimination with regenerator runtime\n          didNavigate = true\n        }\n      }\n\n      if (didNavigate) {\n        return new Promise(() => {})\n      }\n    }\n\n    if (!(options as any)._h) {\n      this.isSsr = false\n    }\n    // marking route changes as a navigation start entry\n    if (ST) {\n      performance.mark('routeChange')\n    }\n\n    const { shallow = false } = options\n    const routeProps = { shallow }\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute, routeProps)\n    }\n\n    as = addBasePath(\n      addLocale(\n        hasBasePath(as) ? delBasePath(as) : as,\n        options.locale,\n        this.defaultLocale\n      )\n    )\n    const cleanedAs = delLocale(\n      hasBasePath(as) ? delBasePath(as) : as,\n      this.locale\n    )\n    this._inFlightRoute = as\n\n    // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n    if (!(options as any)._h && this.onlyAHashChange(cleanedAs)) {\n      this.asPath = cleanedAs\n      Router.events.emit('hashChangeStart', as, routeProps)\n      // TODO: do we need the resolved href when only a hash change?\n      this.changeState(method, url, as, options)\n      this.scrollToHash(cleanedAs)\n      this.notify(this.components[this.route], null)\n      Router.events.emit('hashChangeComplete', as, routeProps)\n      return true\n    }\n\n    let parsed = parseRelativeUrl(url)\n    let { pathname, query } = parsed\n\n    // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n    let pages: any, rewrites: any\n    try {\n      pages = await this.pageLoader.getPageList()\n      ;({ __rewrites: rewrites } = await getClientBuildManifest())\n    } catch (err) {\n      // If we fail to resolve the page list or client-build manifest, we must\n      // do a server-side transition:\n      window.location.href = as\n      return false\n    }\n\n    // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n    if (!this.urlIsNew(cleanedAs) && !localeChange) {\n      method = 'replaceState'\n    }\n\n    // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n    let resolvedAs = as\n\n    // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n    pathname = pathname\n      ? removePathTrailingSlash(delBasePath(pathname))\n      : pathname\n\n    if (shouldResolveHref && pathname !== '/_error') {\n      if (process.env.__NEXT_HAS_REWRITES && as.startsWith('/')) {\n        const rewritesResult = resolveRewrites(\n          addBasePath(addLocale(cleanedAs, this.locale)),\n          pages,\n          rewrites,\n          query,\n          (p: string) => resolveDynamicRoute(p, pages),\n          this.locales\n        )\n        resolvedAs = rewritesResult.asPath\n\n        if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n          // if this directly matches a page we need to update the href to\n          // allow the correct page chunk to be loaded\n          pathname = rewritesResult.resolvedHref\n          parsed.pathname = pathname\n          url = formatWithValidation(parsed)\n        }\n      } else {\n        parsed.pathname = resolveDynamicRoute(pathname, pages)\n\n        if (parsed.pathname !== pathname) {\n          pathname = parsed.pathname\n          url = formatWithValidation(parsed)\n        }\n      }\n    }\n\n    const route = removePathTrailingSlash(pathname)\n\n    if (!isLocalURL(as)) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `Invalid href: \"${url}\" and as: \"${as}\", received relative href and external as` +\n            `\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`\n        )\n      }\n\n      window.location.href = as\n      return false\n    }\n\n    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale)\n\n    if (isDynamicRoute(route)) {\n      const parsedAs = parseRelativeUrl(resolvedAs)\n      const asPathname = parsedAs.pathname\n\n      const routeRegex = getRouteRegex(route)\n      const routeMatch = getRouteMatcher(routeRegex)(asPathname)\n      const shouldInterpolate = route === asPathname\n      const interpolatedAs = shouldInterpolate\n        ? interpolateAs(route, asPathname, query)\n        : ({} as { result: undefined; params: undefined })\n\n      if (!routeMatch || (shouldInterpolate && !interpolatedAs.result)) {\n        const missingParams = Object.keys(routeRegex.groups).filter(\n          (param) => !query[param]\n        )\n\n        if (missingParams.length > 0) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `${\n                shouldInterpolate\n                  ? `Interpolating href`\n                  : `Mismatching \\`as\\` and \\`href\\``\n              } failed to manually provide ` +\n                `the params: ${missingParams.join(\n                  ', '\n                )} in the \\`href\\`'s \\`query\\``\n            )\n          }\n\n          throw new Error(\n            (shouldInterpolate\n              ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(\n                  ', '\n                )}) to be interpolated properly. `\n              : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) +\n              `Read more: https://nextjs.org/docs/messages/${\n                shouldInterpolate\n                  ? 'href-interpolation-failed'\n                  : 'incompatible-href-as'\n              }`\n          )\n        }\n      } else if (shouldInterpolate) {\n        as = formatWithValidation(\n          Object.assign({}, parsedAs, {\n            pathname: interpolatedAs.result,\n            query: omitParmsFromQuery(query, interpolatedAs.params!),\n          })\n        )\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch)\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as, routeProps)\n\n    try {\n      let routeInfo = await this.getRouteInfo(\n        route,\n        pathname,\n        query,\n        as,\n        resolvedAs,\n        routeProps\n      )\n      let { error, props, __N_SSG, __N_SSP } = routeInfo\n\n      // handle redirect on client-transition\n      if ((__N_SSG || __N_SSP) && props) {\n        if ((props as any).pageProps && (props as any).pageProps.__N_REDIRECT) {\n          const destination = (props as any).pageProps.__N_REDIRECT\n\n          // check if destination is internal (resolves to a page) and attempt\n          // client-navigation if it is falling back to hard navigation if\n          // it's not\n          if (destination.startsWith('/')) {\n            const parsedHref = parseRelativeUrl(destination)\n            parsedHref.pathname = resolveDynamicRoute(\n              parsedHref.pathname,\n              pages\n            )\n\n            if (pages.includes(parsedHref.pathname)) {\n              const { url: newUrl, as: newAs } = prepareUrlAs(\n                this,\n                destination,\n                destination\n              )\n              return this.change(method, newUrl, newAs, options)\n            }\n          }\n\n          window.location.href = destination\n          return new Promise(() => {})\n        }\n\n        this.isPreview = !!props.__N_PREVIEW\n\n        // handle SSG data 404\n        if (props.notFound === SSG_DATA_NOT_FOUND) {\n          let notFoundRoute\n\n          try {\n            await this.fetchComponent('/404')\n            notFoundRoute = '/404'\n          } catch (_) {\n            notFoundRoute = '/_error'\n          }\n\n          routeInfo = await this.getRouteInfo(\n            notFoundRoute,\n            notFoundRoute,\n            query,\n            as,\n            resolvedAs,\n            { shallow: false }\n          )\n        }\n      }\n\n      Router.events.emit('beforeHistoryChange', as, routeProps)\n      this.changeState(method, url, as, options)\n\n      if (process.env.NODE_ENV !== 'production') {\n        const appComp: any = this.components['/_app'].Component\n        ;(window as any).next.isPrerendered =\n          appComp.getInitialProps === appComp.origGetInitialProps &&\n          !(routeInfo.Component as any).getInitialProps\n      }\n\n      // shallow routing is only allowed for same page URL changes.\n      const isValidShallowRoute = options.shallow && this.route === route\n\n      if (\n        (options as any)._h &&\n        pathname === '/_error' &&\n        self.__NEXT_DATA__.props?.pageProps?.statusCode === 500 &&\n        props?.pageProps\n      ) {\n        // ensure statusCode is still correct for static 500 page\n        // when updating query information\n        props.pageProps.statusCode = 500\n      }\n\n      await this.set(\n        route,\n        pathname!,\n        query,\n        cleanedAs,\n        routeInfo,\n        forcedScroll ||\n          (isValidShallowRoute || !options.scroll ? null : { x: 0, y: 0 })\n      ).catch((e) => {\n        if (e.cancelled) error = error || e\n        else throw e\n      })\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs, routeProps)\n        throw error\n      }\n\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        if (this.locale) {\n          document.documentElement.lang = this.locale\n        }\n      }\n      Router.events.emit('routeChangeComplete', as, routeProps)\n\n      return true\n    } catch (err) {\n      if (err.cancelled) {\n        return false\n      }\n      throw err\n    }\n  }\n\n  changeState(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions = {}\n  ): void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`)\n        return\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`)\n        return\n      }\n    }\n\n    if (method !== 'pushState' || getURL() !== as) {\n      this._shallow = options.shallow\n      window.history[method](\n        {\n          url,\n          as,\n          options,\n          __N: true,\n          idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1,\n        } as HistoryState,\n        // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        '',\n        as\n      )\n    }\n  }\n\n  async handleRouteInfoError(\n    err: Error & { code: any; cancelled: boolean },\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    routeProps: RouteProperties,\n    loadErrorFail?: boolean\n  ): Promise<CompletePrivateRouteInfo> {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err\n    }\n\n    if (isAssetError(err) || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as, routeProps)\n\n      // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n\n      // So, doing a hard reload is the proper way to deal with this.\n      window.location.href = as\n\n      // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n      throw buildCancellationError()\n    }\n\n    try {\n      let Component: ComponentType\n      let styleSheets: StyleSheetTuple[]\n      let props: Record<string, any> | undefined\n\n      if (\n        typeof Component! === 'undefined' ||\n        typeof styleSheets! === 'undefined'\n      ) {\n        ;({ page: Component, styleSheets } = await this.fetchComponent(\n          '/_error'\n        ))\n      }\n\n      const routeInfo: CompletePrivateRouteInfo = {\n        props,\n        Component,\n        styleSheets,\n        err,\n        error: err,\n      }\n\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component, {\n            err,\n            pathname,\n            query,\n          } as any)\n        } catch (gipErr) {\n          console.error('Error in error page `getInitialProps`: ', gipErr)\n          routeInfo.props = {}\n        }\n      }\n\n      return routeInfo\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(\n        routeInfoErr,\n        pathname,\n        query,\n        as,\n        routeProps,\n        true\n      )\n    }\n  }\n\n  async getRouteInfo(\n    route: string,\n    pathname: string,\n    query: any,\n    as: string,\n    resolvedAs: string,\n    routeProps: RouteProperties\n  ): Promise<PrivateRouteInfo> {\n    try {\n      const existingRouteInfo: PrivateRouteInfo | undefined = this.components[\n        route\n      ]\n      if (routeProps.shallow && existingRouteInfo && this.route === route) {\n        return existingRouteInfo\n      }\n\n      const cachedRouteInfo: CompletePrivateRouteInfo | undefined =\n        existingRouteInfo && 'initial' in existingRouteInfo\n          ? undefined\n          : existingRouteInfo\n      const routeInfo: CompletePrivateRouteInfo = cachedRouteInfo\n        ? cachedRouteInfo\n        : await this.fetchComponent(route).then((res) => ({\n            Component: res.page,\n            styleSheets: res.styleSheets,\n            __N_SSG: res.mod.__N_SSG,\n            __N_SSP: res.mod.__N_SSP,\n          }))\n\n      const { Component, __N_SSG, __N_SSP } = routeInfo\n\n      if (process.env.NODE_ENV !== 'production') {\n        const { isValidElementType } = require('react-is')\n        if (!isValidElementType(Component)) {\n          throw new Error(\n            `The default export is not a React Component in page: \"${pathname}\"`\n          )\n        }\n      }\n\n      let dataHref: string | undefined\n\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref(\n          formatWithValidation({ pathname, query }),\n          resolvedAs,\n          __N_SSG,\n          this.locale\n        )\n      }\n\n      const props = await this._getData<CompletePrivateRouteInfo>(() =>\n        __N_SSG\n          ? this._getStaticData(dataHref!)\n          : __N_SSP\n          ? this._getServerData(dataHref!)\n          : this.getInitialProps(\n              Component,\n              // we provide AppTree later so this needs to be `any`\n              {\n                pathname,\n                query,\n                asPath: as,\n                locale: this.locale,\n                locales: this.locales,\n                defaultLocale: this.defaultLocale,\n              } as any\n            )\n      )\n\n      routeInfo.props = props\n      this.components[route] = routeInfo\n      return routeInfo\n    } catch (err) {\n      return this.handleRouteInfoError(err, pathname, query, as, routeProps)\n    }\n  }\n\n  set(\n    route: string,\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    data: PrivateRouteInfo,\n    resetScroll: { x: number; y: number } | null\n  ): Promise<void> {\n    this.isFallback = false\n\n    this.route = route\n    this.pathname = pathname\n    this.query = query\n    this.asPath = as\n    return this.notify(data, resetScroll)\n  }\n\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n  beforePopState(cb: BeforePopStateCallback) {\n    this._bps = cb\n  }\n\n  onlyAHashChange(as: string): boolean {\n    if (!this.asPath) return false\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#')\n    const [newUrlNoHash, newHash] = as.split('#')\n\n    // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true\n    }\n\n    // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false\n    }\n\n    // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash\n  }\n\n  scrollToHash(as: string): void {\n    const [, hash] = as.split('#')\n    // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n    if (hash === '' || hash === 'top') {\n      window.scrollTo(0, 0)\n      return\n    }\n\n    // First we check if the element by id is found\n    const idEl = document.getElementById(hash)\n    if (idEl) {\n      idEl.scrollIntoView()\n      return\n    }\n    // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0]\n    if (nameEl) {\n      nameEl.scrollIntoView()\n    }\n  }\n\n  urlIsNew(asPath: string): boolean {\n    return this.asPath !== asPath\n  }\n\n  /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */\n  async prefetch(\n    url: string,\n    asPath: string = url,\n    options: PrefetchOptions = {}\n  ): Promise<void> {\n    let parsed = parseRelativeUrl(url)\n\n    let { pathname } = parsed\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      if (options.locale === false) {\n        pathname = normalizeLocalePath!(pathname, this.locales).pathname\n        parsed.pathname = pathname\n        url = formatWithValidation(parsed)\n\n        let parsedAs = parseRelativeUrl(asPath)\n        const localePathResult = normalizeLocalePath!(\n          parsedAs.pathname,\n          this.locales\n        )\n        parsedAs.pathname = localePathResult.pathname\n        options.locale = localePathResult.detectedLocale || this.defaultLocale\n        asPath = formatWithValidation(parsedAs)\n      }\n    }\n\n    const pages = await this.pageLoader.getPageList()\n    let resolvedAs = asPath\n\n    if (process.env.__NEXT_HAS_REWRITES && asPath.startsWith('/')) {\n      let rewrites: any\n      ;({ __rewrites: rewrites } = await getClientBuildManifest())\n\n      const rewritesResult = resolveRewrites(\n        addBasePath(addLocale(asPath, this.locale)),\n        pages,\n        rewrites,\n        parsed.query,\n        (p: string) => resolveDynamicRoute(p, pages),\n        this.locales\n      )\n      resolvedAs = delLocale(delBasePath(rewritesResult.asPath), this.locale)\n\n      if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n        // if this directly matches a page we need to update the href to\n        // allow the correct page chunk to be loaded\n        pathname = rewritesResult.resolvedHref\n        parsed.pathname = pathname\n        url = formatWithValidation(parsed)\n      }\n    } else {\n      parsed.pathname = resolveDynamicRoute(parsed.pathname, pages)\n\n      if (parsed.pathname !== pathname) {\n        pathname = parsed.pathname\n        url = formatWithValidation(parsed)\n      }\n    }\n    const route = removePathTrailingSlash(pathname)\n\n    // Prefetch is not supported in development mode because it would trigger on-demand-entries\n    if (process.env.NODE_ENV !== 'production') {\n      return\n    }\n\n    await Promise.all([\n      this.pageLoader._isSsg(route).then((isSsg: boolean) => {\n        return isSsg\n          ? this._getStaticData(\n              this.pageLoader.getDataHref(\n                url,\n                resolvedAs,\n                true,\n                typeof options.locale !== 'undefined'\n                  ? options.locale\n                  : this.locale\n              )\n            )\n          : false\n      }),\n      this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route),\n    ])\n  }\n\n  async fetchComponent(route: string): Promise<GoodPageCache> {\n    let cancelled = false\n    const cancel = (this.clc = () => {\n      cancelled = true\n    })\n\n    const componentResult = await this.pageLoader.loadPage(route)\n\n    if (cancelled) {\n      const error: any = new Error(\n        `Abort fetching component for route: \"${route}\"`\n      )\n      error.cancelled = true\n      throw error\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null\n    }\n\n    return componentResult\n  }\n\n  _getData<T>(fn: () => Promise<T>): Promise<T> {\n    let cancelled = false\n    const cancel = () => {\n      cancelled = true\n    }\n    this.clc = cancel\n    return fn().then((data) => {\n      if (cancel === this.clc) {\n        this.clc = null\n      }\n\n      if (cancelled) {\n        const err: any = new Error('Loading initial props cancelled')\n        err.cancelled = true\n        throw err\n      }\n\n      return data\n    })\n  }\n\n  _getStaticData(dataHref: string): Promise<object> {\n    const { href: cacheKey } = new URL(dataHref, window.location.href)\n    if (\n      process.env.NODE_ENV === 'production' &&\n      !this.isPreview &&\n      this.sdc[cacheKey]\n    ) {\n      return Promise.resolve(this.sdc[cacheKey])\n    }\n    return fetchNextData(dataHref, this.isSsr).then((data) => {\n      this.sdc[cacheKey] = data\n      return data\n    })\n  }\n\n  _getServerData(dataHref: string): Promise<object> {\n    const { href: resourceKey } = new URL(dataHref, window.location.href)\n    if (this.sdr[resourceKey]) {\n      return this.sdr[resourceKey]\n    }\n    return (this.sdr[resourceKey] = fetchNextData(dataHref, this.isSsr)\n      .then((data) => {\n        delete this.sdr[resourceKey]\n        return data\n      })\n      .catch((err) => {\n        delete this.sdr[resourceKey]\n        throw err\n      }))\n  }\n\n  getInitialProps(\n    Component: ComponentType,\n    ctx: NextPageContext\n  ): Promise<any> {\n    const { Component: App } = this.components['/_app']\n    const AppTree = this._wrapApp(App as AppComponent)\n    ctx.AppTree = AppTree\n    return loadGetInitialProps<AppContextType<Router>>(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx,\n    })\n  }\n\n  abortComponentLoad(as: string, routeProps: RouteProperties): void {\n    if (this.clc) {\n      Router.events.emit(\n        'routeChangeError',\n        buildCancellationError(),\n        as,\n        routeProps\n      )\n      this.clc()\n      this.clc = null\n    }\n  }\n\n  notify(\n    data: PrivateRouteInfo,\n    resetScroll: { x: number; y: number } | null\n  ): Promise<void> {\n    return this.sub(\n      data,\n      this.components['/_app'].Component as AppComponent,\n      resetScroll\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}