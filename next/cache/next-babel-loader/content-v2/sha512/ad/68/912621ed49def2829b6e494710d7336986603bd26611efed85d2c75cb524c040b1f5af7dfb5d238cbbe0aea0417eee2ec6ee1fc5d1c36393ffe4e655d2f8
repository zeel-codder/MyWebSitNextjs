{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar DataBase = require('server/database/DataBaseOperationsBlogInfo');\n\nexport default function handler(_x, _x2) {\n  return _handler.apply(this, arguments);\n}\n\nfunction _handler() {\n  _handler = _asyncToGenerator(function* (req, res) {\n    // your server-side functionality\n    var body = req.body;\n    var filter = body.filter;\n    var update = body.update; // console.log(filter,update);\n    // console.log('strat');\n\n    yield DataBase.ONConnections();\n    yield DataBase.GetBlogInfoAndUpDate(filter, update, DataBase.BlogInfo); // await DataBase.OffDatabase();\n\n    res.end(JSON.stringify({\n      message: \"Blog Update\"\n    }));\n  });\n  return _handler.apply(this, arguments);\n}\n\n;","map":null,"metadata":{},"sourceType":"module"}